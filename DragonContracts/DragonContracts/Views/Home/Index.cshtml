@{
    ViewBag.Title = "Home";
}
@section Scripts {
    @Scripts.Render("~/bundles/knockout")

    <script type="text/javascript">
        function ContractsViewModel() {
            var self = this;
            self.loaded = ko.observable(false);
            self.contracts = ko.observableArray([]);
            self.emptyContractJs = null;
            self.newContract = ko.observable();

            self.createContractFromForm = function (formElement) {
                // If valid, post the serialized form data to the web api

                $.validator.unobtrusive.parse($(formElement));

                var val = $(formElement).validate();
                var isValid = val.form();
                if (isValid) {
                    var newContractJs = ko.mapping.toJS(self.newContract);

                    //var json = ko.mapping.toJSON(self.newContract);
                    //alert(json);

                    $.post("/api/contract", newContractJs, "json")
                        .done(function(status) {
                            //alert(status);
                            self.contracts.push(newContractJs);
                        });

                    self.newContract(ko.mapping.fromJS(self.emptyContractJs));
                    
                    self.newContract().SignedOn(moment().format());

                    $("[datepicker='datepicker']").datepicker();
                }
            }

            ;

            self.removeContact = function (contact) {
                // First remove from the server, then from the UI
                $.ajax({ type: "DELETE", url: contact.Self })
                    .done(function () { self.contracts.remove(contact); });
            };

            // Load the initial state
            $.getJSON("/api/contract")
                .done(function (data) {
                    self.emptyContractJs = data;
                    self.newContract(ko.mapping.fromJS(data));

                    $.datepicker.setDefaults($.datepicker.regional['cs']);
                    $("[datepicker='datepicker']").datepicker();
                });

            $.getJSON("/api/contracts", self.contracts)
                .done(function () {
                    self.loaded(true);

                    //test to rewrite ids for use with Html.Partial
                    //$("#firstParty").find("[id]").each(function (index, element) {
                    //    element.parent()
                    //});
                });
        }

        jQuery.validator.methods["date"] = function (value, element) {
            try { jQuery.datepicker.parseDate('d.m.yy', value); return true; }
            catch (e) { return false; }
        };

        moment.lang("cs");

        ko.bindingHandlers.date = {
            init: function (element, valueAccessor, allBindingsAccessor) {
                var formats = allBindingsAccessor().dateFormats || { from: "", to: "L" };
                element.onchange = function () {
                    var observable = valueAccessor();
                    var value = moment(element.value, "L");
                    if (value && value.isValid()) {
                        //if format is not set then assume observed is a js date
                        if (formats.from) {
                            observable(value.format(formats.from));
                        }
                        else {
                            observable(value.toDate());
                        }
                    }
                    else {
                        observable("");
                        //ensures element is blank when invalid input is attempted
                        if (element.value) element.value = "";
                    }
                };
            },
            update: function (element, valueAccessor, allBindingsAccessor) {
                var formats = allBindingsAccessor().dateFormats || { from: "", to: "L" };
                var observable = valueAccessor();
                var valueUnwrapped = ko.utils.unwrapObservable(observable);
                if (valueUnwrapped) {
                    element.value = moment(valueUnwrapped).format(formats.to);
                }
                else {
                    element.value = "";
                }
            }
        };
        
        ko.bindingHandlers.dateText = {
            update: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var valueUnwrapped = ko.utils.unwrapObservable(valueAccessor());
                var formatted = moment(valueUnwrapped).format("L");
                ko.bindingHandlers.text.update(element, function() { return formatted; });
            }
        };

        ko.applyBindings(new ContractsViewModel());

        //$(function() {
        //    $.datepicker.setDefaults($.datepicker.regional['cs']);
        //    $("[datepicker='datepicker']").datepicker();
        //});


    </script>
}

<div id="body">
    <section class="featured">
        <div class="content-wrapper">
            <div>
                <button>Všechny typy</button>
                <button>Smlouvy o dílo</button>
                <button>Mandátní smlouvy</button>
                <button>Kupní smlouvy</button>
                <button>Nájemní smlouvy</button>
                <button>Ostatní smlouvy</button>
            </div>
        </div>
    </section>
    <section class="content-wrapper main-content clear-fix">
        <div class="container float-left">
            <img id="loader" src="images/ajax-loader.gif" data-bind="visible: !loaded()" />

            <ul id="contracts" data-bind="visible: loaded, foreach: contracts">
                <li class="ui-widget-content contract">
                    <h2 data-bind="text: Subject" class="ui-widget-header"></h2>
                    <div class="contract-price"><span>Cena: </span><span data-bind="text: Price"></span></div>
                    <div class="contract-signedOn"><span>Podepsána: </span><span data-bind="dateText: SignedOn"></span></div>
                    <div class="contract-party" data-bind="with: FirstParty">
                        <label>Objednatel</label>
                        @Html.Partial("Partial/ContactView")
                    </div>
                    <div class="contract-party" data-bind="with: SecondParty">
                        <label>Zhotovitel</label>
                        @Html.Partial("Partial/ContactView")
                    </div>
                </li>
            </ul>
        </div>
        <div class="addContainer float-left" data-bind="with: newContract">
            @Html.Partial("AddContract")
        </div>
    </section>

</div>
